#!/usr/bin/env ruby
STDOUT.sync = true

$:.unshift File.join(File.dirname(__FILE__), *%w{ ../lib })

require 'yaml'
require 'active_record'
require 'colorize'

require 'proiel'

db_config_file = File.open(File.join(File.dirname(__FILE__), '../config/database.yml'))
db_config = YAML::load(db_config_file)

ActiveRecord::Base.establish_connection(db_config['development'])

autoload :PROIELXMLExporter, 'proiel_xml_exporter'
autoload :PROIELXMLImporter, 'proiel_xml_importer'

module Proiel
  module Jobs
    class FakeLogger
      def error(&block)
        if block_given?
          STDERR.puts block.call
        end
      end
    end

    class Job
      def initialize
        @logger = FakeLogger.new
      end
    end
  end

  autoload :Metadata, 'metadata'
end

require 'blankable'
require 'dependency_graph'
require 'yaml'
require 'morph_features'
require 'morphtag_constraints'
require 'unicode_normalization_validation'
require 'tagset'

UNICODE_NORMALIZATION_FORM = :c

require 'validator'
require 'legacy_stubs'
require 'jobs'
require 'maintenance'

#rake make_fsts
#rake proiel:bilingual_dictionary:create   # Create a dictionary based on collocat...
#rake proiel:dependency_alignments:import  # Import dependency alignments
#rake proiel:history:prune:attribute       # Prune an attribute from history
#rake proiel:morphology:force_manual_tags  # Force manual morphological rules
#rake proiel:morphology:reassign           # Reassign a source_morphology field
#rake proiel:token_alignments:set          # Set token alignments
#rake proiel:validate                      # Validate database objects

def process(args, options, klass, method)
  klass.send(method, *args)
rescue ArgumentError => e
  STDERR.puts "Argument error: #{e}. Use --help for more information."
  exit 1
end

TARGETS = {
  dependency_alignments: Proiel::Maintenance::DependencyAlignments,
  history: Proiel::Maintenance::History,
  inflections: Proiel::Maintenance::Inflections,
  information_statuses: Proiel::Maintenance::InformationStatuses,
  morphology: Proiel::Maintenance::Morphology,
  notes: Proiel::Maintenance::Notes,
  semantic_relations: Proiel::Maintenance::SemanticRelations,
  semantic_tags: Proiel::Maintenance::SemanticTags,
  text: Proiel::Maintenance::Texts,
  token_alignments: Proiel::Maintenance::TokenAlignments,
}

def usage(error: false)
  STDERR.puts "proiel-webapp is a command-line interface for the PROIEL web application"
  STDERR.puts
  STDERR.puts "Usage:"
  STDERR.puts "   proiel-webapp [OPTIONS] help"
  STDERR.puts "   proiel-webapp [OPTIONS] delete TARGET ARGUMENTS"
  STDERR.puts
  STDERR.puts "   proiel-webapp check"
  STDERR.puts
  STDERR.puts "   proiel-webapp import text INPUT_FILENAME"
  STDERR.puts
  #STDERR.puts "   proiel-webapp delete text NUMERICAL_TEXT_ID"
  STDERR.puts
  STDERR.puts "   proiel-webapp export dependency_alignments OUTPUT_FILENAME"
  #STDERR.puts "   proiel-webapp export history OUTPUT_FILENAME"
  STDERR.puts "   proiel-webapp export inflections OUTPUT_FILENAME"
  STDERR.puts "   proiel-webapp export information_statuses OUTPUT_FILENAME"
  STDERR.puts "   proiel-webapp export morphology OUTPUT_FILENAME"
  STDERR.puts "   proiel-webapp export notes OUTPUT_FILENAME"
  STDERR.puts "   proiel-webapp export semantic_relations OUTPUT_FILENAME"
  STDERR.puts "   proiel-webapp export semantic_tags OUTPUT_FILENAME"
  STDERR.puts "   proiel-webapp export token_alignments OUTPUT_FILENAME"
  STDERR.puts
  STDERR.puts "   proiel-webapp export text NUMERICAL_TEXT_ID OUTPUT_FILENAME"
  STDERR.puts
  STDERR.puts "Options:"
  STDERR.puts "   -V, --verbose   Display verbose information"
  exit(error ? 1 : 0)
end

options = ARGV.select { |arg| arg[/^-/] }
command, subcommand, *arguments = ARGV.reject { |arg| arg[/^-/] }

case command
when 'help'
  usage
when 'check'
  job = Proiel::Jobs::DatabaseChecker.new
  job.run_once!
when 'import', 'export', 'delete'
  if subcommand
    klass = TARGETS[subcommand.to_sym]

    if klass and klass.respond_to?(command)
      klass.send(command, *arguments)
    else
      usage(error: true)
    end
  else
    usage(error: true)
  end
else
  usage(error: true)
end
