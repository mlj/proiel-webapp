!= title "Sentence #{@sentence.id}"
!= breadcrumbs ['Home', root_path], @source, @source_division, @sentence

!= completion_rate @sentence.status
!= link_to_resources @sentence, :edit, :previous, :next
!= external_text_links @sentence
!= export_links @sentence

- unless @reflexives.empty?
  %p
    %h1 Reflexive binding

    %table.ui.table
      %thead
        %tr
          %th Reflexive
          %th Predicate
          %th Binder
          %th OLD entry/note
      %tbody
        - @reflexives.each do |reflexive|
          %tr
            %td!= link_to "#{reflexive.form} (#{reflexive.id})", edit_token_url(reflexive)
            %td
              - if reflexive.head
                != link_to reflexive.head
            %td
              - if reflexive.binder
                != link_to "#{reflexive.binder.form} (#{reflexive.binder.id})", edit_token_url(reflexive.binder)
              - if reflexive.binder.try(:logocentre)
                [#{reflexive.binder.logocentre}]
            %td
              != reflexive.old

%p
  %h1 Sentence in context
  - if is_annotator?
    != link_to " (Change tokenization or sentence division)", edit_sentence_tokenizations_path(@sentence), :method => :get
  != format_annotator_and_time @sentence
  != format_reviewer_and_time @sentence
- if @sentence.is_annotated? and is_reviewer?
  - if @sentence.is_reviewed?
    != link_to "(Change to not reviewed)", flag_as_not_reviewed_sentence_path(@sentence)
  - else
    != link_to "(Change to reviewed)", flag_as_reviewed_sentence_path(@sentence)

  - if @sentence.is_annotated?
    - if @sentence.is_reviewed?
      <span class="tag is-success">Reviewed</span>
    - else
      <span class="tag is-info">Annotated</span>
    - if @sentence.valid?
      <span class="tag is-success">Valid</span>
    - else
      <span class="tag is-danger">Invalid</span>
  - else
    <span class="tag is-warning">Unannotated</span>

  .box.formatted-text
    != format_sentence @sentence_window, citations: true, sentence_numbers: true, highlight: @sentence, sentence_breaks: true, link_to: true

  - if @sentence.has_morphological_annotation?
    %h3.subtitle Morphology
    - if is_annotator?
      != link_to "Edit", sentence_url(@sentence) + '/annotation#!/morphology', class: 'button is-primary'
    %p
      .morphology-view.interlinear
        %table
          - @sentence.tokens.takes_morphology.each do |token|
            %tr
              %td.form!= format_token_form token
              - if token.morph_features
                %td.pos= token.morph_features.pos_summary abbreviated: true
                %td.msd= token.morph_features.morphology_summary abbreviated: true, skip_inflection: true
                %td.lemma!= link_to_lemma token.lemma
                %td.gloss= token.lemma.gloss ? "‘#{token.lemma.gloss}’" : ''

  - if @sentence.has_dependency_annotation?
    %h3.title Syntax
    - if is_annotator?
      != link_to "Edit", sentence_url(@sentence) + '/annotation#!/syntax', class: 'button is-primary'
    %p
      .legend.dependencies
        %h3 Legend:

        %dl
          %dt.head-dependent-relation-bg
          %dd Head-dependent relation
          %dt.slash-relation-bg
          %dd Slash relation
      != render 'dependencies/show'
      <!-- %object{data: sentence_url(@sentence, format: :svg), type: 'image/svg+xml'} -->

  %hr
  %h3.title Information structure
  - if is_annotator?
    != link_to "(Edit)", edit_sentence_info_status_url(@sentence)
  %p
    != render 'info_statuses/show'

  %hr
  %h3.title Semantic tags
  - @sentence.tokens.each do |t|
    - unless t.semantic_tags.empty?
      != semantic_tags_summary t.semantic_tags
    - unless t.outgoing_semantic_relations.empty?
      != semantic_relations_summary t.outgoing_semantic_relations
    - unless t.incoming_semantic_relations.empty?
      != semantic_relations_summary t.incoming_semantic_relations
  - unless @semantic_tags.empty?
    != semantic_tags_summary @semantic_tags

- unless @notes.empty?
  %h3.title Notes
  != render partial: 'notes/summary', collection: @notes

- unless @tokens_with_foreign_ids.empty?
  %hr
  %h3.subtitle Foreign IDs
  %table.table
    %thead
      %tr
        %th Object
        %th Foreign IDs
    %tbody
      - @tokens_with_foreign_ids.each do |t|
        %tr
          %td= "Token #{t.id}"
          %td
            %tt= t.foreign_ids

- unless @audits.empty?
  %hr
  %h3.title History
  != render partial: 'audits/summary', collection: @audits
