!= title "Sentence #{@sentence.id}"
!= breadcrumbs ['Home', root_path], @source, @source_division, @sentence

!= completion_rate @sentence.status
!= link_to_resources @sentence, :edit, :previous, :next
!= external_text_links @sentence
!= export_links @sentence

- unless @reflexives.empty?
  %p
    %h1 Reflexive binding

    %table.ui.table
      %thead
        %tr
          %th Reflexive
          %th Binder
      %tbody
        - @reflexives.each do |reflexive|
          %tr
            %td!= link_to "#{reflexive.form} (#{reflexive.id})", edit_token_url(reflexive)
            %td
              - if reflexive.binder
                != "#{reflexive.binder.form} (#{reflexive.binder.id})"

%p
  %h1 Sentence in context
  - if is_annotator?
    != link_to " (Change tokenization or sentence division)", edit_sentence_tokenizations_path(@sentence), :method => :get

  != format_sentence @sentence_window, citations: true, sentence_numbers: true, highlight: @sentence, sentence_breaks: true, link_to: true

  %hr
  %h3.title Annotation status
  - if @sentence.is_annotated? and is_reviewer?
    - if @sentence.is_reviewed?
      != link_to "(Change to not reviewed)", flag_as_not_reviewed_sentence_path(@sentence)
    - else
      != link_to "(Change to reviewed)", flag_as_reviewed_sentence_path(@sentence)

  %p
    != format_annotator_and_time @sentence
    %br
    != format_reviewer_and_time @sentence

  - if @sentence.is_reviewed?
    %p
      - if @sentence.valid?
        Annotation is valid.

  %hr
  %h3.title Morphology
  - if is_annotator?
    != link_to "(Edit)", edit_sentence_morphtags_url(@sentence)
  %p
    != render 'morphtags/show'

  %hr
  %h3.title Syntax
  - if is_annotator?
    != link_to "(Edit)", edit_sentence_dependencies_url(@sentence)
  %p
    != render 'dependencies/show'

  %hr
  %h3.title Information structure
  - if is_annotator?
    != link_to "(Edit)", edit_sentence_info_status_url(@sentence)
  %p
    != render 'info_statuses/show'

- if is_reviewer?
  %hr
  %h3.title Notes
  %ol
    - unless @notes.empty?
      != render partial: 'notes/summary', collection: @notes
    - @sentence.tokens.each do |token|
      - unless token.notes.empty?
        != render :partial => 'notes/summary', :collection => token.notes

  %hr
  %h3.title History
  != render 'audits/legend'
  %ol
    - unless @audits.empty?
      != render partial: 'audits/summary', collection: @audits
    - @sentence.tokens.each do |token|
      - unless token.audits.empty?
        != render :partial => 'audits/summary', :collection => token.audits

  %hr
  %h3.title Semantic tags
  != semantic_tags_summary @semantic_tags
  - @sentence.tokens.each do |t|
    - unless t.semantic_tags.empty?
      != semantic_tags_summary t.semantic_tags
    - unless t.outgoing_semantic_relations.empty?
      != semantic_relations_summary t.outgoing_semantic_relations
    - unless t.incoming_semantic_relations.empty?
      != semantic_relations_summary t.incoming_semantic_relations

  %hr
  %h3.title Foreign keys
  %table
    - @sentence.tokens.each do |t|
      - unless t.foreign_ids.blank?
        %tr
          %td= t.id
          %td.tag= t.foreign_ids
