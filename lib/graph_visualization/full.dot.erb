digraph G {
  charset="UTF-8";
  graph [truecolor=true,bgcolor=transparent];
  root [label="",shape=none];

  <% @tokens.each do |token| %>
    <% if token.conjunction? %>
      <%= node token.id, TokenText.token_form_as_html(token.form) || token.empty_token_sort, shape: :none %>
    <% elsif token.is_empty? %>
      <%= node token.id, token.empty_token_sort, :shape => :none %>
    <% else %>
      <%= node token.id, [TokenText.token_form_as_html(token.form), token.lemma.try { |s| " (#{s.export_form})" }, token.morph_features.try { |s| s.pos_summary(:abbreviated => true) }].join(' '), :shape => :none %>
    <% end %>

    <% if token.head and token.relation %>
      <%= edge token.head.id, token.id, token.relation.to_s.upcase,
          :weight => 0.0, :color => :orange %>
    <% elsif token.relation %>
      <%= edge :root, token.id, token.relation.to_s.upcase,
          :weight => 0.0, :color => :orange %>
    <% end %>

    <% token.slash_out_edges.each do |slash_edge| %>
      <%= edge token.id, slash_edge.slashee.id, slash_edge.relation.to_s.upcase,
          :weight => 0.0, :color => :blue, :style => :dashed %>
    <% end %>

    <% if token.antecedent %>
      <%= edge token.id, token.antecedent.id, '',
          :weight => 0.0, :color => :red, :style => :solid %>
    <% end %>
  <% end %>
}
